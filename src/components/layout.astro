---
export type LayoutType = "12" | "6-6" | "4-4-4" | "3-3-3-3" | "4-8" | "8-4";
// prettier-ignore
export type ContentAlignment = "equalHeightRows" | "individualHeightRows" | "individualHeightItems";

interface Props {
  type?: LayoutType;
  contentAlignment?: ContentAlignment;
  contentGap?: 0 | 16 | 32;
  verticalMargins?: boolean;
  id?: string;
}
import { parseHTML } from "linkedom";

function contentAlignmentClass(contentAlignment: Props["contentAlignment"]) {
  return contentAlignment === "equalHeightRows"
    ? "equal-height-rows"
    : contentAlignment === "individualHeightRows"
      ? "individual-height-rows"
      : "individual-height-items";
}

function verticalMarginsClass(verticalMargins: Props["verticalMargins"]) {
  return verticalMargins ? "vertical-margins" : "";
}

const html = await Astro.slots.render("default");
const { document } = parseHTML(html);
const numberOfSlots = document.children.length;
const remainder = numberOfSlots % 3;

const {
  type = "12",
  contentAlignment = "equalHeightRows",
  id,
  contentGap = 32,
  verticalMargins = false,
} = Astro.props;
---

<div
  class:list={[
    "layout",
    `layout-${type}`,
    remainder === 2 && "first-item-full-width",
    contentAlignmentClass(contentAlignment),
    verticalMarginsClass(verticalMargins),
  ]}
  id={id}
>
  <slot />
</div>

<style
  define:vars={{
    remainder: remainder ? "initial" : "-1 / 1",
    "content-gap": `${contentGap}px`,
    "vertical-margins": verticalMargins ? "64px" : "0",
  }}
>
  .layout {
    display: grid;
    column-gap: var(--content-gap);
    row-gap: var(--content-gap);
    margin: var(--vertical-margins) 0;

    &.equal-height-rows {
      grid-auto-rows: minmax(0, 1fr);
    }

    &.individual-height-rows {
      grid-template-rows: repeat(auto-fill, minmax(256px, 1fr));
    }

    &.individual-height-items {
      align-items: start;
    }
  }

  /* 
  544px wide container = 2 columns
  ---
  Minimum content area of 256px x 2 = 512px
  The gap takes up 32px x 1 = 32px
  512px + 32px = 544px
  */
  @container layout-container (min-width: 544px) {
    .layout {
      &.layout-6-6,
      &.layout-3-3-3-3 {
        grid-template-columns: repeat(2, 1fr);
      }

      &.layout-4-8,
      &.layout-8-4 {
        grid-template-columns: 1fr;
      }

      &.layout-4-4-4 {
        grid-template-columns: repeat(2, 1fr);

        /* Special handling of items when in 2-column mode */
        &.first-item-full-width {
          > :first-child {
            grid-column: 1 / -1;
          }
        }
      }
    }
  }

  /* 
  800px wide container = 4-8/8-4 layouts viable
  ---
  4fr column (1/3) minimum width = 256px
  8fr column (2/3) = 512px
  Gap = 32px
  Total = 800px
  */
  @container layout-container (min-width: 800px) {
    .layout {
      &.layout-4-8 {
        grid-template-columns: 4fr 8fr;
      }

      &.layout-8-4 {
        grid-template-columns: 8fr 4fr;
      }
    }
  }

  /* 
  832px wide container = 3 columns viable
  ---
  Minimum content area of 256px x 3 = 768px
  The gap takes up 32px x 2 = 64px
  768px + 64px = 832px
  */
  @container layout-container (min-width: 832px) {
    .layout {
      &.layout-4-4-4 {
        grid-template-columns: repeat(3, 1fr);

        /* Special handling for 4-4-4 layout when in 2-column mode */
        &.first-item-full-width {
          > :first-child {
            grid-column: 1 / 3;
          }
        }
      }
    }
  }

  /* 
  1120px wide container = 4 columns viable
  ---
  Minimum content area of 256px x 4 = 1024px
  The gap takes up 32px x 3 = 96px
  1024px + 96px = 1120px
  */
  @container layout-container (min-width: 1120px) {
    .layout {
      &.layout-3-3-3-3 {
        grid-template-columns: repeat(4, 1fr);
      }
    }
  }
</style>
