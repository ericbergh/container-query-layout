---
export type LayoutType = "12" | "6-6" | "4-4-4" | "3-3-3-3" | "4-8" | "8-4";

interface Props {
  type?: LayoutType;
  id?: string;
}
import { parseHTML } from "linkedom";

const html = await Astro.slots.render("default");
const { document } = parseHTML(html);
const numberOfSlots = document.children.length;
const atLeastThreeSlots = numberOfSlots >= 3;
const slotsDivisibleByThree = numberOfSlots % 3 === 0;

const { type = "12", id } = Astro.props;
---

<div class={`layout layout-${type}`} id={id}><slot /></div>

<style
  define:vars={{
    atLeastThreeSlots: atLeastThreeSlots ? "initial" : "-1 / 1",
    slotsDivisibleByThree: slotsDivisibleByThree ? "initial" : "-1 / 1",
  }}
>
  .layout {
    display: grid;
    column-gap: 32px;
    row-gap: 32px;
  }

  /* 
  544px wide container = 2 columns
  ---
  Minimum content area of 256px x 2 = 512px
  The gap takes up 32px x 1 = 32px
  512px + 32px = 544px
  */
  @container layout-container (min-width: 544px) {
    .layout {
      &.layout-6-6,
      &.layout-4-4-4,
      &.layout-3-3-3-3,
      &.layout-4-8,
      &.layout-8-4 {
        grid-template-columns: repeat(2, 1fr);
      }

      /* 
      800px wide container for 4-8/8-4 layouts
      ---
      4fr column (1/3) minimum width = 256px
      8fr column (2/3) = 512px
      Gap = 32px
      Total = 800px
      */
      &.layout-4-8,
      &.layout-8-4 {
        grid-template-columns: 1fr;
      }

      &.layout-4-4-4 {
        .layout-container:nth-child(n + 3),
        .content-area:nth-child(n + 3) {
          grid-column: var(--atLeastThreeSlots);
        }
      }
    }
  }

  @container layout-container (min-width: 800px) {
    .layout {
      &.layout-4-8 {
        grid-template-columns: 4fr 8fr;
      }

      &.layout-8-4 {
        grid-template-columns: 8fr 4fr;
      }
    }
  }

  /* 
  832px wide container = 3 columns
  ---
  Minimum content area of 256px x 3 = 768px
  The gap takes up 32px x 2 = 64px
  768px + 64px = 832px
  */
  @container layout-container (min-width: 832px) {
    .layout {
      &.layout-4-4-4 {
        grid-template-columns: repeat(3, 1fr);

        .layout-container:nth-child(n + 6),
        .content-area:nth-child(n + 6) {
          grid-column: var(--slotsDivisibleByThree);
        }
      }
    }
  }

  /* 
  1120px wide container = 4 columns
  ---
  Minimum content area of 256px x 4 = 1024px
  The gap takes up 32px x 3 = 96px
  1024px + 96px = 1120px
  */
  @container layout-container (min-width: 1120px) {
    .layout {
      &.layout-3-3-3-3 {
        grid-template-columns: repeat(4, 1fr);
      }
    }
  }
</style>
