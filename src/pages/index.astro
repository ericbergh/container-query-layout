---
import LayoutContainer from "../components/layout_container.astro";
import Layout from "../components/layout.astro";
import ContentArea from "../components/content_area.astro";
import Card from "../components/card.astro";
import RootLayout from "../layouts/root_layout.astro";
import type { LayoutType, ContentAlignment } from "../components/layout.astro";

function validateLayoutUrlParam(layout: string | null): LayoutType {
  if (
    layout &&
    ["12", "6-6", "4-4-4", "3-3-3-3", "4-8", "8-4"].includes(layout)
  ) {
    return layout as LayoutType;
  }

  return "12";
}

function validateContentAlignmentUrlParam(
  contentAlignment: string | null,
): ContentAlignment {
  if (!contentAlignment) {
    return "equalHeightRows";
  }

  if (
    [
      "equalHeightRows",
      "individualHeightRows",
      "individualHeightItems",
    ].includes(contentAlignment)
  ) {
    return contentAlignment as ContentAlignment;
  }

  return "equalHeightRows";
}

// Get initial state from URL parameters
const urlParams = new URL(Astro.request.url).searchParams;
const initialLayout = validateLayoutUrlParam(urlParams.get("layout"));
const initialContentAlignment = validateContentAlignmentUrlParam(
  urlParams.get("contentAlignment"),
);
const initialContentGap = Number(urlParams.get("contentGap") || "32") as
  | 0
  | 16
  | 32;
const initialVerticalMargins = urlParams.get("verticalMargins") === "true";

// Update the parsing function
function parseLayoutItems(itemsParam: string | null): any {
  if (!itemsParam) return [];
  try {
    const items = JSON.parse(decodeURIComponent(itemsParam));
    return items;
  } catch {
    return [];
  }
}

// Update where we get the initial items
const itemsParam = urlParams.get("items");
const initialItems = parseLayoutItems(itemsParam);
---

<RootLayout title="Grid Layout Demo">
  <LayoutContainer>
    <Layout type="12">
      <ContentArea>
        <!-- <div class="description">
    <h2>The One Grid</h2>
    <ul>
      <li>This grid can either have content or grids as immediate children.</li>
      <li>The width of the grid items may never be less than 256px.</li>
      <li>The column gap is either 0, 16px or 32px but we account for 32px.</li>
      <li>
        We assume that each grid will have the same number of immediate children
        as it does columns.
      </li>
    </ul>
  </div> -->
        <div class="grid-showcase">
          <section class="grid-demo">
            <h2>Layout block</h2>
            <div class="controls">
              <h3>Type</h3>
              <p>
                The amount of columns in the layout block. This holds true as
                long as the individual columns doesn't get below 256px, after
                which it will be reduced to the closest most columns.
              </p>
              <div class="layout-type-controls">
                <select id="layout-type-select">
                  <option value="12" selected={initialLayout === "12"}>
                    12 - one column
                  </option>
                  <option value="6-6" selected={initialLayout === "6-6"}>
                    6-6 - two columns
                  </option>
                  <option value="4-4-4" selected={initialLayout === "4-4-4"}>
                    4-4-4 - three columns
                  </option>
                  <option
                    value="3-3-3-3"
                    selected={initialLayout === "3-3-3-3"}
                  >
                    3-3-3-3 - four columns
                  </option>
                  <option value="4-8" selected={initialLayout === "4-8"}>
                    4-8 - two columns, small/big
                  </option>
                  <option value="8-4" selected={initialLayout === "8-4"}>
                    8-4 - two columns, big/small
                  </option>
                </select>
              </div>
              <div class="content-alignment-controls">
                <h3>Content alignment</h3>
                <select id="content-alignment-select">
                  <option
                    value="equalHeightRows"
                    selected={initialContentAlignment === "equalHeightRows"}
                  >
                    Equal Height Rows
                  </option>
                  <option
                    value="individualHeightRows"
                    selected={initialContentAlignment ===
                      "individualHeightRows"}
                  >
                    Individual Height Rows
                  </option>
                  <option
                    value="individualHeightItems"
                    selected={initialContentAlignment ===
                      "individualHeightItems"}
                  >
                    Individual Height Items
                  </option>
                </select>
              </div>
              <div class="gap-controls">
                <h3>Content gap</h3>
                <select id="content-gap-select">
                  <option value="0" selected={initialContentGap === 0}>
                    No gap (0px)
                  </option>
                  <option value="16" selected={initialContentGap === 16}>
                    Small gap (16px)
                  </option>
                  <option value="32" selected={initialContentGap === 32}>
                    Large gap (32px)
                  </option>
                </select>
              </div>
              <div class="margin-controls">
                <label class="checkbox-label">
                  <input
                    type="checkbox"
                    id="vertical-margins-toggle"
                    checked={initialVerticalMargins}
                  />
                  Vertical margins
                </label>
              </div>
              <div class="width-controls">
                <label class="checkbox-label">
                  <input
                    type="checkbox"
                    id="full-width-toggle"
                    checked={urlParams.get("fullWidth") === "true"}
                  />
                  Full width
                </label>
              </div>
              <div class="content-controls">
                <h3>Content area</h3>
                <div class="content-preview">
                  <div class="preview-grid" id="content-preview">
                    {
                      initialItems.map((item: any, index: number) => (
                        <div
                          class="preview-item"
                          data-index={index}
                          data-type={item.type}
                        >
                          {item.type === "card" ? (
                            <span>CardBlock</span>
                          ) : (
                            <div class="nested-layout">
                              <span>LayoutBlock</span>
                              <div class="nested-layout-controls">
                                <div class="nested-layout-type-select">
                                  <select
                                    class="nested-layout-type"
                                    data-index={index}
                                  >
                                    <option
                                      value="12"
                                      selected={item.layout?.type === "12"}
                                    >
                                      12 - one column
                                    </option>
                                    <option
                                      value="6-6"
                                      selected={item.layout?.type === "6-6"}
                                    >
                                      6-6 - two columns
                                    </option>
                                    <option
                                      value="4-4-4"
                                      selected={item.layout?.type === "4-4-4"}
                                    >
                                      4-4-4 - three columns
                                    </option>
                                    <option
                                      value="3-3-3-3"
                                      selected={item.layout?.type === "3-3-3-3"}
                                    >
                                      3-3-3-3 - four columns
                                    </option>
                                  </select>
                                </div>
                                <div class="nested-content-alignment">
                                  <select
                                    class="nested-content-alignment-select"
                                    data-index={index}
                                  >
                                    <option
                                      value="equalHeightRows"
                                      selected={
                                        item.layout?.contentAlignment ===
                                        "equalHeightRows"
                                      }
                                    >
                                      Equal Height Rows
                                    </option>
                                    <option
                                      value="individualHeightRows"
                                      selected={
                                        item.layout?.contentAlignment ===
                                        "individualHeightRows"
                                      }
                                    >
                                      Individual Height Rows
                                    </option>
                                    <option
                                      value="individualHeightItems"
                                      selected={
                                        item.layout?.contentAlignment ===
                                        "individualHeightItems"
                                      }
                                    >
                                      Individual Height Items
                                    </option>
                                  </select>
                                </div>
                                <div class="nested-gap-controls">
                                  <select
                                    class="nested-content-gap-select"
                                    data-index={index}
                                  >
                                    <option
                                      value="0"
                                      selected={item.layout?.contentGap === 0}
                                    >
                                      No gap (0px)
                                    </option>
                                    <option
                                      value="16"
                                      selected={item.layout?.contentGap === 16}
                                    >
                                      Small gap (16px)
                                    </option>
                                    <option
                                      value="32"
                                      selected={item.layout?.contentGap === 32}
                                    >
                                      Large gap (32px)
                                    </option>
                                  </select>
                                </div>
                                <label class="checkbox-label">
                                  <input
                                    type="checkbox"
                                    class="nested-vertical-margins-toggle"
                                    data-index={index}
                                    checked={item.layout?.verticalMargins}
                                  />
                                  Vertical margins
                                </label>
                              </div>
                              <div
                                class="preview-grid"
                                style="position: unset;"
                              >
                                {item.layout?.items?.map(
                                  (subItem: any, subIndex: number) => (
                                    <div
                                      class="preview-item nested-preview-item"
                                      data-parent-index={index}
                                      data-index={subIndex}
                                    >
                                      <span>
                                        {subItem.type === "card"
                                          ? "CardBlock"
                                          : "LayoutBlock"}
                                      </span>
                                      <button
                                        class="remove-nested-item"
                                        data-parent-index={index}
                                        data-index={subIndex}
                                        title="Remove this item"
                                      >
                                        ×
                                      </button>
                                    </div>
                                  ),
                                )}
                                <div class="nested-controls">
                                  <button
                                    class="add-nested-item"
                                    data-parent-index={index}
                                  >
                                    + Add Card
                                  </button>
                                </div>
                              </div>
                            </div>
                          )}
                          <button class="remove-item" title="Remove this item">
                            ×
                          </button>
                        </div>
                      ))
                    }
                    <div class="add-controls">
                      <button class="add-item" data-type="card"
                        >+ Add CardBlock</button
                      >
                      <button class="add-item" data-type="layout"
                        >+ Add LayoutBlock</button
                      >
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </section>
        </div>
      </ContentArea>
    </Layout>
  </LayoutContainer>
  <LayoutContainer>
    <Layout type="12">
      <ContentArea>
        <h3>Preview</h3>
      </ContentArea>
    </Layout>
  </LayoutContainer>
  <LayoutContainer
    id="demo-layout-container"
    fullWidth={urlParams.get("fullWidth") === "true"}
  >
    <Layout
      type={initialLayout}
      contentAlignment={initialContentAlignment}
      contentGap={initialContentGap}
      verticalMargins={initialVerticalMargins}
    >
      {
        initialItems.map((item: any, index: number) => (
          <ContentArea>
            {item.type === "card" ? (
              <Card groupNumber={index + 1} cardNumber={index + 1} />
            ) : (
              <Layout
                type={item.layout?.type || "12"}
                contentAlignment={
                  item.layout?.contentAlignment || "equalHeightRows"
                }
                contentGap={item.layout?.contentGap || 32}
                verticalMargins={item.layout?.verticalMargins || false}
              >
                {item.layout?.items.map((subItem: any, subIndex: number) => (
                  <ContentArea>
                    {subItem.type === "card" ? (
                      <Card groupNumber={index + 1} cardNumber={subIndex + 1} />
                    ) : (
                      // Handle nested layouts here if needed
                      <Card groupNumber={index + 1} cardNumber={subIndex + 1} />
                    )}
                  </ContentArea>
                ))}
              </Layout>
            )}
          </ContentArea>
        ))
      }
    </Layout>
  </LayoutContainer>
</RootLayout>

<style>
  .grid-showcase {
    display: grid;
    gap: 64px;
  }

  .description {
    margin: 32px 0 64px 0;
  }

  ul {
    line-height: 1.5;
  }

  .controls {
    margin-bottom: 2rem;

    h3 {
      margin: 0 0 0.5rem 0;
    }

    p {
      margin: 0 0 0.5rem 0;
      max-width: 64ch;
    }
  }

  .layout-type-controls select {
    margin-top: 0.5rem;
    padding: 0.5rem;
    border: 1px solid #ccc;
    border-radius: 4px;
    background: white;
    min-width: 200px;
  }

  .demo-block {
    background: #f0f0f0;
    padding: 2rem;
    border-radius: 8px;
    text-align: center;
    min-height: 150px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.25rem;
  }

  .content-controls {
    margin-top: 2rem;
  }

  .content-preview {
    margin-top: 1rem;
  }

  .preview-grid {
    display: flex;
    flex-direction: column;
    gap: 8px;
    border: 1px solid hsl(0, 0%, 84%);
    border-radius: 4px;
    line-height: 1.2;
    min-height: 24px;
    padding: 16px;
  }

  .preview-item {
    position: relative;
    display: flex;
    align-items: center;
    gap: 1rem;
    background: #fff;
    border: 1px solid #b1bac0;
    border-radius: 4px;
    padding: 12px 16px;
  }

  .remove-item {
    position: absolute;
    right: 1rem;
    top: 8px;
    border: none;
    background: none;
    color: #666;
    font-size: 1.2rem;
    cursor: pointer;
    padding: 0.25rem;
    line-height: 1;
  }

  .remove-item:hover {
    color: #ff4444;
  }

  .item-type-select {
    margin-left: auto;
    padding: 4px 8px;
    border: 1px solid #ccc;
    border-radius: 4px;
    background: white;
  }

  .add-controls {
    display: flex;
    gap: 0.5rem;
    margin-top: 0.5rem;
  }

  .add-item {
    padding: 0.5rem 1rem;
    background: #4a90e2;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background 0.2s ease;
  }

  .add-item:hover {
    background: #357abd;
  }

  .width-controls {
    margin-top: 2rem;
  }

  .checkbox-label {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    cursor: pointer;
  }

  .checkbox-label input[type="checkbox"] {
    width: 16px;
    height: 16px;
  }

  .nested-layout {
    display: flex;
    flex-direction: column;
    gap: 8px;
    width: 100%;
  }

  .nested-items {
    margin-left: 16px;
    padding: 8px;
    border-left: 2px solid #eee;
  }

  .layout-type-select {
    margin-top: 8px;
  }

  .nested-layout-type {
    padding: 4px 8px;
    border: 1px solid #ccc;
    border-radius: 4px;
    background: white;
  }

  .nested-controls {
    margin-top: 8px;
  }

  .add-nested-item {
    padding: 4px 8px;
    background: #4a90e2;
    color: white;
    border: none;
    border-radius: 4px;
    font-size: 0.9em;
    cursor: pointer;
  }

  .remove-nested-item {
    background: none;
    border: none;
    color: #666;
    cursor: pointer;
    padding: 2px 6px;
  }

  .remove-nested-item:hover {
    color: #ff4444;
  }

  .content-alignment-controls {
    margin-top: 2rem;
  }

  .content-alignment-controls select {
    margin-top: 0.5rem;
    padding: 0.5rem;
    border: 1px solid #ccc;
    border-radius: 4px;
    background: white;
    min-width: 200px;
  }

  .gap-controls,
  .margin-controls {
    margin-top: 2rem;
  }

  .gap-controls select {
    margin-top: 0.5rem;
    padding: 0.5rem;
    border: 1px solid #ccc;
    border-radius: 4px;
    background: white;
    min-width: 200px;
  }

  .nested-layout-controls {
    display: flex;
    gap: 1rem;
    margin: 0.5rem 0 1rem 0;
  }

  .nested-layout-controls select {
    padding: 4px 8px;
    border: 1px solid #ccc;
    border-radius: 4px;
    background: white;
  }

  .nested-content-alignment,
  .nested-gap-controls {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .nested-preview-item {
    background: #f8f9fa;
  }
</style>

<script>
  function updateURL(layout: string, items: any, fullWidth?: boolean) {
    const url = new URL(window.location.href);
    url.searchParams.set("layout", layout);
    url.searchParams.set("items", encodeURIComponent(JSON.stringify(items)));

    // Get current content alignment
    const contentAlignment = (
      document.getElementById("content-alignment-select") as HTMLSelectElement
    )?.value;
    if (contentAlignment) {
      url.searchParams.set("contentAlignment", contentAlignment);
    }

    // Get content gap
    const contentGap = (
      document.getElementById("content-gap-select") as HTMLSelectElement
    )?.value;
    if (contentGap) {
      url.searchParams.set("contentGap", contentGap);
    }

    // Get vertical margins
    const verticalMargins = (
      document.getElementById("vertical-margins-toggle") as HTMLInputElement
    )?.checked;
    url.searchParams.set("verticalMargins", verticalMargins.toString());

    if (fullWidth !== undefined) {
      url.searchParams.set("fullWidth", fullWidth.toString());
    }
    window.location.href = url.toString();
  }

  function getCurrentItems(): any {
    const items: any = [];
    const topLevelItems = document.querySelectorAll(
      ".preview-item[data-index]:not(.nested-preview-item)",
    );

    topLevelItems.forEach((item) => {
      const type = item.getAttribute("data-type") as "card" | "layout";
      if (type === "card") {
        items.push({ type: "card" });
      } else {
        const layoutType = (
          item.querySelector(".nested-layout-type") as HTMLSelectElement
        )?.value;
        const contentAlignment = (
          item.querySelector(
            ".nested-content-alignment-select",
          ) as HTMLSelectElement
        )?.value;
        const contentGap = Number(
          (
            item.querySelector(
              ".nested-content-gap-select",
            ) as HTMLSelectElement
          )?.value,
        );
        const verticalMargins = (
          item.querySelector(
            ".nested-vertical-margins-toggle",
          ) as HTMLInputElement
        )?.checked;

        // Get nested items directly from the preview grid
        const nestedItems: any[] = [];
        const nestedPreviewItems = item.querySelectorAll(
          ".nested-preview-item",
        );

        // Create a new card object for each nested item
        nestedPreviewItems.forEach(() => {
          nestedItems.push({ type: "card" });
        });

        items.push({
          type: "layout",
          layout: {
            type: layoutType || "12",
            items: nestedItems,
            contentAlignment: contentAlignment || "equalHeightRows",
            contentGap: contentGap || 32,
            verticalMargins: verticalMargins || false,
          },
        });
      }
    });
    return items;
  }

  function initializeGridControls() {
    const layoutSelect = document.getElementById("layout-type-select");

    layoutSelect?.addEventListener("change", (e) => {
      const select = e.target as HTMLSelectElement;
      const newLayout = select.value;
      const items = getCurrentItems();
      updateURL(newLayout, items);
    });
  }

  function initializeContentControls() {
    const preview = document.getElementById("content-preview");

    // Handle remove buttons for top-level items
    preview?.addEventListener("click", (e) => {
      const target = e.target as HTMLElement;
      if (target.classList.contains("remove-item")) {
        const currentLayout =
          new URLSearchParams(window.location.search).get("layout") || "12";
        const itemToRemove = target.closest(
          ".preview-item:not(.nested-preview-item)",
        );
        if (!itemToRemove) return;

        const indexToRemove = parseInt(
          itemToRemove.getAttribute("data-index") || "-1",
        );
        if (indexToRemove === -1) return;

        const currentItems = getCurrentItems();

        // Remove the entire item (layout block or card) at once
        const items = currentItems.filter(
          (_: any, index: number) => index !== indexToRemove,
        );
        updateURL(currentLayout, items);
      }
    });

    // Add new items
    document.querySelectorAll(".add-item").forEach((button) => {
      button.addEventListener("click", () => {
        const currentLayout =
          new URLSearchParams(window.location.search).get("layout") || "12";
        const items = getCurrentItems();
        const type = button.getAttribute("data-type");

        if (type === "card") {
          items.push({ type: "card" });
        } else if (type === "layout") {
          items.push({
            type: "layout",
            layout: {
              type: "12",
              items: [{ type: "card" }],
              contentAlignment: "equalHeightRows",
              contentGap: 32,
              verticalMargins: false,
            },
          });
        }

        updateURL(currentLayout, items);
      });
    });
  }

  function initializeWidthControls() {
    const fullWidthToggle = document.getElementById(
      "full-width-toggle",
    ) as HTMLInputElement;

    fullWidthToggle?.addEventListener("change", () => {
      const currentLayout =
        new URLSearchParams(window.location.search).get("layout") || "12";
      const items = getCurrentItems();
      updateURL(currentLayout, items, fullWidthToggle.checked);
    });
  }

  function initializeContentAlignmentControls() {
    const contentAlignmentSelect = document.getElementById(
      "content-alignment-select",
    );
    contentAlignmentSelect?.addEventListener("change", () => {
      const currentLayout =
        new URLSearchParams(window.location.search).get("layout") || "12";
      const items = getCurrentItems();
      const fullWidth = (
        document.getElementById("full-width-toggle") as HTMLInputElement
      )?.checked;
      updateURL(currentLayout, items, fullWidth);
    });
  }

  function initializeGapControls() {
    const gapSelect = document.getElementById("content-gap-select");
    gapSelect?.addEventListener("change", () => {
      const currentLayout =
        new URLSearchParams(window.location.search).get("layout") || "12";
      const items = getCurrentItems();
      const fullWidth = (
        document.getElementById("full-width-toggle") as HTMLInputElement
      )?.checked;
      updateURL(currentLayout, items, fullWidth);
    });
  }

  function initializeMarginControls() {
    const marginToggle = document.getElementById("vertical-margins-toggle");
    marginToggle?.addEventListener("change", () => {
      const currentLayout =
        new URLSearchParams(window.location.search).get("layout") || "12";
      const items = getCurrentItems();
      const fullWidth = (
        document.getElementById("full-width-toggle") as HTMLInputElement
      )?.checked;
      updateURL(currentLayout, items, fullWidth);
    });
  }

  function initializeNestedControls() {
    document.addEventListener("change", (e) => {
      const target = e.target as HTMLElement;
      if (
        target.classList.contains("nested-layout-type") ||
        target.classList.contains("nested-content-alignment-select") ||
        target.classList.contains("nested-content-gap-select") ||
        target.classList.contains("nested-vertical-margins-toggle")
      ) {
        const items = getCurrentItems();
        const currentLayout =
          new URLSearchParams(window.location.search).get("layout") || "12";
        updateURL(currentLayout, items);
      }
    });

    // Handle removing nested items
    document.addEventListener("click", (e) => {
      const target = e.target as HTMLElement;
      if (target.classList.contains("remove-nested-item")) {
        const button = target as HTMLElement;
        const parentIndex = parseInt(
          button.getAttribute("data-parent-index") || "-1",
        );
        const index = parseInt(button.getAttribute("data-index") || "-1");

        if (parentIndex === -1 || index === -1) return;

        const items = getCurrentItems();
        if (items[parentIndex]?.layout?.items) {
          // Remove the nested item directly
          const parentItems = items[parentIndex].layout.items;
          items[parentIndex].layout.items = parentItems.filter(
            (_: any, i: number) => i !== index,
          );

          const currentLayout =
            new URLSearchParams(window.location.search).get("layout") || "12";
          updateURL(currentLayout, items);
        }
      }
    });

    // Update the add nested item handler
    document.addEventListener("click", (e) => {
      const target = e.target as HTMLElement;
      if (target.classList.contains("add-nested-item")) {
        const parentIndex = parseInt(
          target.getAttribute("data-parent-index") || "0",
        );
        const items = getCurrentItems();

        if (items[parentIndex]?.layout?.items) {
          items[parentIndex].layout.items.push({ type: "card" });
          const currentLayout =
            new URLSearchParams(window.location.search).get("layout") || "12";
          updateURL(currentLayout, items);
        }
      }
    });
  }

  // Initialize all controls when the DOM is loaded
  document.addEventListener("DOMContentLoaded", () => {
    initializeGridControls();
    initializeContentControls();
    initializeWidthControls();
    initializeNestedControls();
    initializeContentAlignmentControls();
    initializeGapControls();
    initializeMarginControls();
  });
</script>
